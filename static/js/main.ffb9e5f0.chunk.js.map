{"version":3,"sources":["components/common/Skeleton.tsx","constants/texts.tsx","components/layout/Layout.tsx","services/useService.tsx","constants/api.tsx","services/queries/useGetCountryDetail.tsx","pages/Page404.tsx","pages/PageError500.tsx","pages-components/CountryDetail.tsx","services/queries/useGetContinents.tsx","services/queries/useGetCountries.tsx","pages-components/CountryList/SearchNavForm.tsx","pages-components/CountryList/index.tsx","pages/AppRoutes.tsx","App.tsx","reportWebVitals.ts","providers/AppProvider.tsx","index.tsx"],"names":["Skeleton","children","loading","active","TEXTS","title","tryAgain","list","footer","error500","error404","welcome","description","formCountryLabel","formCountryPlaceholder","formCurrencyLabel","formCurrencyPlaceholder","formContinentLabel","formContinentPlaceholder","tableColName","tableColContinent","tableColCode","tableColDetails","tableButtonViewDetails","contentStyles","padding","background","mainContentStyle","width","maxWidth","margin","footerStyles","textAlign","headerStyles","Layout","Header","LibLayout","Content","Footer","style","request","query","a","requestGql","process","gql","useService","params","name","useQuery","useGetCountryDetail","countryCode","data","error","isLoading","Page404","navigate","useNavigate","onBack","PageError500","window","location","reload","CountryDetail","useParams","navigationType","useNavigationType","country","subTitle","layout","bordered","Item","label","code","continent","capital","currency","split","map","curr","languages","lang","useGetContinents","useGetCountries","search","currencyCode","continents","length","JSON","stringify","refetch","isRefetching","SearchNavForm","dataContinents","handleChangeFilter","gutter","xs","span","md","allowClear","size","placeholder","value","onChange","e","target","mode","values","Option","CountryList","useSearchParams","searchParams","setSearchParams","useState","get","continentsSP","checkContinentsSearchParams","firstFilter","setSearch","loadingContinents","errorContinents","useEffect","tableColumns","key","dataIndex","render","record","to","Title","level","Paragraph","type","upperCaseValue","toUpperCase","newSearch","seralizeSearchParams","join","columns","dataSource","countries","pagination","rowKey","AppRoutes","path","element","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","AppProvider","client","QueryClient","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ffb9e5f0.chunk.js","sourcesContent":["import { FC } from \"react\";\r\nimport { Skeleton as SkeletonLib } from \"antd\";\r\n\r\ninterface ISkeletonProps {\r\n    loading: boolean,\r\n}\r\n\r\nconst Skeleton: FC<ISkeletonProps> = ({ children, loading }) => (\r\n    <>\r\n        {loading ?\r\n            <SkeletonLib loading={loading} active={loading} />\r\n            : <>{children}</>\r\n        }\r\n    </>\r\n);\r\n\r\nexport default Skeleton;","export const TEXTS = {\r\n    common: {\r\n        title: \"Search Countries UI\",\r\n        tryAgain: \"Try again\",\r\n        list: \"List\",\r\n        footer: \"Hello globetrotter, this is an exercise made with the stack of: reactjs, typescript and graphql. For this project I have used the api of countries.trevorblades.com, ant design for the UI, react-query for the query management, graphql-request for the graphql client scripts, and router-dom for the routing. Hope you find it useful!\",\r\n        error500: \"Ups! Something went wrong. This is very shameful... But maybe it is the backend, not me! Don't blame on me :/. Let's try again.\",\r\n        error404: \"Seems that the country you are looking for doesn't exist. Maybe you feel like becoming a founder?\"\r\n    },\r\n    countryList: {\r\n        welcome: \"Welcome!\",\r\n        description: \"Here you can find a list of countries, you can filter them by their country code, their currency code or by continents. To see the details of a country, click on View Details\",\r\n        formCountryLabel: \"Country code\",\r\n        formCountryPlaceholder: \"Enter country code...\",\r\n        formCurrencyLabel: \"Currency code\",\r\n        formCurrencyPlaceholder: \"Enter currency code...\",\r\n        formContinentLabel: \"Continent\",\r\n        formContinentPlaceholder: \"Select continents...\",\r\n        tableColName: \"Name\",\r\n        tableColContinent: \"Continent\",\r\n        tableColCode: \"Code\",\r\n        tableColDetails: \"Details\",\r\n        tableButtonViewDetails: \"View details\"\r\n    },\r\n    countryDetail: {\r\n        title: \"Details of the country\",\r\n        headerName: \"Name\",\r\n        headerCode: \"Code\",\r\n        headerContinent: \"Continent\",\r\n        headerCapital: \"Capital\",\r\n        headerCurrency: \"Currency\",\r\n        headerLanguages: \"Languages\"\r\n    }\r\n};","import { FC } from 'react';\r\nimport CSS from 'csstype';\r\nimport { Layout as LibLayout, PageHeader } from 'antd';\r\nimport { TEXTS } from '../../constants/texts';\r\n\r\nconst contentStyles: CSS.Properties = {\r\n    padding: '30px',\r\n    background: '#fff'\r\n}\r\nconst mainContentStyle: CSS.Properties = {\r\n  width: '100%',\r\n  maxWidth: '1000px',\r\n  margin: '0 auto'\r\n}\r\nconst footerStyles: CSS.Properties = {\r\n    textAlign: 'right'\r\n}\r\nconst headerStyles: CSS.Properties = {\r\n  background: 'unset'\r\n} \r\n\r\nconst Layout:FC = ({ children }) => {\r\n  const { Header, Content, Footer } = LibLayout;\r\n  return (\r\n    <LibLayout>\r\n      <Header style={headerStyles}>\r\n        <PageHeader\r\n          title={TEXTS.common.title}\r\n        />\r\n      </Header>\r\n      <Content style={contentStyles}>\r\n        <div style={mainContentStyle}>\r\n          {children}\r\n        </div>\r\n      </Content>\r\n      <Footer style={footerStyles}>\r\n        {TEXTS.common.footer}\r\n      </Footer>\r\n    </LibLayout>\r\n  );\r\n}\r\n\r\nexport default Layout;","import { useQuery } from \"react-query\";\r\nimport { request as requestGql, gql } from \"graphql-request\";\r\nimport { API_URL } from \"../constants/api\";\r\n\r\ninterface IUseServiceParams {\r\n    name: string,\r\n    query: string\r\n}\r\n\r\nconst request = async (query: string) => await requestGql(API_URL, gql`${query}`);\r\n\r\nconst useService = (params: IUseServiceParams) => {\r\n    const { name, query } = params;\r\n    return useQuery(name, () => request(query));\r\n};\r\n\r\nexport default useService;","export const API_URL: string = process.env['REACT_APP_COUNTRIES_API'] || \"\";","import useService from \"../useService\";\r\nimport { ICountry } from \"../interfaces\";\r\n\r\nexport interface IUseGetCountryDetail {\r\n    data: {\r\n        country?: ICountry\r\n    },\r\n    loading: boolean,\r\n    error: any\r\n}\r\n\r\nconst useGetCountryDetail = (countryCode: string): IUseGetCountryDetail => {\r\n    const query = `\r\n        query GetCountryDetail {\r\n            country(code:\"${countryCode}\"){\r\n                name,\r\n                code,\r\n                capital,\r\n                currency,\r\n                languages{ name },\r\n                continent{ name }\r\n            }\r\n        }\r\n    `;\r\n    const { data, error, isLoading } = useService({ name: `Country${countryCode}`, query });\r\n    return { data, error, loading: isLoading }\r\n}\r\n\r\nexport default useGetCountryDetail;","import { Empty, PageHeader } from \"antd\";\r\nimport { useNavigate } from \"react-router\";\r\nimport { TEXTS } from \"../constants/texts\";\r\n\r\nconst Page404 = () => {\r\n    const navigate = useNavigate();\r\n    return(\r\n        <>\r\n            <PageHeader title={TEXTS.common.list} onBack={() => navigate('/')} />\r\n            <Empty description={TEXTS.common.error404} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Page404;","import { Empty, PageHeader } from \"antd\";\r\nimport { TEXTS } from \"../constants/texts\";\r\n\r\nconst PageError500= () => {\r\n    const letsTryAgain = () => {\r\n        window.location.reload();\r\n    }\r\n    return(\r\n        <>\r\n            <PageHeader title={TEXTS.common.tryAgain} onBack={letsTryAgain} />\r\n            <Empty description={TEXTS.common.error500} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PageError500;","import { Tag, Descriptions, PageHeader } from \"antd\";\r\nimport { useNavigate, useNavigationType, useParams } from \"react-router\";\r\nimport useGetCountryDetail from \"../services/queries/useGetCountryDetail\";\r\nimport { Skeleton } from \"../components\";\r\nimport { Page404 } from \"../pages\";\r\nimport { PageError500 } from \"../pages\";\r\n\r\nconst CountryDetail = () => {\r\n    const { countryCode } = useParams ();\r\n    const navigate = useNavigate();\r\n    const navigationType = useNavigationType();\r\n    const { data, loading, error } = useGetCountryDetail(countryCode || \"\");\r\n\r\n    const handleBack = () => {\r\n        if (navigationType === \"PUSH\") navigate(-1);\r\n        else navigate('/');\r\n    }\r\n\r\n    if (error) return <PageError500 />;\r\n    if (data && data.country == null) return <Page404/>;\r\n\r\n    return (\r\n        <Skeleton loading={loading}>\r\n            <PageHeader\r\n                title={data?.country?.name}\r\n                subTitle=\"Details of the country\"\r\n                onBack={handleBack}\r\n            />\r\n            <Descriptions\r\n                layout=\"vertical\"\r\n                bordered\r\n            >\r\n                <Descriptions.Item label=\"Code\" key=\"code\"><div>{data?.country?.code}</div></Descriptions.Item>\r\n                <Descriptions.Item label=\"Name\" key=\"name\">{data?.country?.name}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Continent\" key=\"continent\">{data?.country?.continent.name}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Capital\" key=\"capital\">{data?.country?.capital}</Descriptions.Item>\r\n                <Descriptions.Item label=\"Currency\" key=\"currency\">\r\n                    {data?.country?.currency?.split(',').map((curr) => (\r\n                        <Tag key={curr}>{curr}</Tag>\r\n                    ))}\r\n                </Descriptions.Item>\r\n                <Descriptions.Item label=\"Languages\" key=\"languages\">\r\n                    {data?.country?.languages?.map((lang) => (\r\n                        <Tag key={lang.name}>{lang.name}</Tag>\r\n                    ))}\r\n                </Descriptions.Item>\r\n            </Descriptions>\r\n        </Skeleton>\r\n    )\r\n}\r\n\r\nexport default CountryDetail;","import useService from \"../useService\";\r\nimport { IContinent } from \"../interfaces\";\r\n\r\nexport interface IUseGetContinents {\r\n    data: {\r\n        continents: IContinent[]\r\n    },\r\n    loading: boolean,\r\n    error: any\r\n}\r\n\r\nconst useGetContinents = (): IUseGetContinents => {\r\n    const query = `\r\n        query GetContinents {\r\n            continents{\r\n                name,\r\n                code\r\n            }\r\n        }\r\n    `;\r\n    const { data, error, isLoading } = useService({ name: \"ListContinents\", query });\r\n    return { data, error, loading: isLoading }\r\n}\r\n\r\nexport default useGetContinents;","import useService from \"../useService\";\r\nimport { ICountry } from \"../interfaces\";\r\n\r\ninterface IGetCountriesParams {\r\n    search: {\r\n        countryCode: string,\r\n        currencyCode: string,\r\n        continents: string[]\r\n    }\r\n}\r\n\r\nexport interface IUseGetCountries {\r\n    data: {\r\n        countries: ICountry[]\r\n    },\r\n    loading: boolean,\r\n    error: any,\r\n    refetch: Function,\r\n    isRefetching: boolean\r\n}\r\n\r\nconst useGetCountries = (params: IGetCountriesParams): IUseGetCountries => {\r\n    const { search } = params;\r\n    const query = `\r\n        query ListCountries {\r\n            countries (filter: {\r\n            ${search.countryCode !== \"\" ? `code: {regex: \"^${search.countryCode}\"}` : ''},\r\n            ${search.currencyCode !== \"\" ? `currency: {regex: \"^${search.currencyCode}\"}` : ''}\r\n            ${search.continents.length ? `continent: {in: ${JSON.stringify(search.continents)}}` : ''}\r\n            }) {\r\n                name,\r\n                code,\r\n                continent{ name, code }\r\n            }\r\n        }\r\n    `;\r\n    const { data, error, isLoading, refetch, isRefetching } = useService({ name: \"ListCountries\", query });\r\n    return { data, error, loading: isLoading, refetch, isRefetching }\r\n}\r\n\r\nexport default useGetCountries;","import { FC } from \"react\";\r\nimport { Form, Input, Select, Row, Col } from 'antd';\r\nimport { IContinent } from \"../../services/interfaces\";\r\nimport { TEXTS } from \"../../constants/texts\";\r\n\r\ninterface ISearchNavFormProps {\r\n    search: {\r\n        countryCode: string,\r\n        currencyCode: string,\r\n        continents: string[]\r\n    },\r\n    dataContinents: {\r\n        continents: IContinent[]\r\n    },\r\n    handleChangeFilter: Function\r\n}\r\n\r\nconst SearchNavForm: FC<ISearchNavFormProps> = ({ search, dataContinents, handleChangeFilter }) => (\r\n    <Form layout=\"vertical\">\r\n        <Row gutter={6}>\r\n            <Col xs={{ span: 8 }} md={{ span: 5 }}>\r\n                <Form.Item label={TEXTS.countryList.formCountryLabel}>\r\n                    <Input\r\n                        allowClear\r\n                        size=\"small\"\r\n                        placeholder={TEXTS.countryList.formCountryPlaceholder}\r\n                        value={search.countryCode}\r\n                        onChange={(e) => handleChangeFilter(\"countryCode\", e.target.value)}\r\n                    />\r\n                </Form.Item>\r\n            </Col>\r\n            <Col xs={{ span: 8 }} md={{ span: 5 }}>\r\n                <Form.Item label={TEXTS.countryList.formCurrencyLabel}>\r\n                    <Input\r\n                        allowClear\r\n                        size=\"small\"\r\n                        placeholder={TEXTS.countryList.formCurrencyPlaceholder}\r\n                        value={search.currencyCode}\r\n                        onChange={(e) => handleChangeFilter(\"currencyCode\", e.target.value)}\r\n                    />\r\n                </Form.Item>\r\n            </Col>\r\n            <Col xs={{ span: 24 }} md={{ span: 14 }}>\r\n                <Form.Item label={TEXTS.countryList.formContinentLabel}>\r\n                    <Select\r\n                        allowClear\r\n                        mode=\"multiple\" \r\n                        size=\"small\"\r\n                        placeholder={TEXTS.countryList.formContinentPlaceholder}\r\n                        value={search.continents}\r\n                        style={{ width: '100%' }}\r\n                        onChange={(values: string[]) => handleChangeFilter(\"continents\", values)}\r\n                    >\r\n                        {dataContinents?.continents?.map((continent) => (\r\n                            <Select.Option\r\n                                key={continent.code}\r\n                                value={continent.code}\r\n                                label={continent.name}\r\n                            >\r\n                                {continent.name}\r\n                            </Select.Option>\r\n                        ))}\r\n                    </Select>\r\n                </Form.Item>\r\n            </Col>\r\n        </Row>\r\n    </Form>\r\n);\r\n\r\nexport default SearchNavForm;","import { useEffect, useState } from \"react\";\r\nimport { Divider, Table, Typography } from 'antd';\r\nimport { Link, useSearchParams } from \"react-router-dom\";\r\nimport { useGetCountries } from \"../../services\";\r\nimport { useGetContinents } from \"../../services\";\r\nimport { Skeleton } from \"../../components\";\r\nimport { PageError500 } from \"../../pages\";\r\nimport SearchNavForm from \"./SearchNavForm\";\r\nimport { TEXTS } from \"../../constants/texts\";\r\n\r\nconst CountryList = () => {\r\n    const [searchParams, setSearchParams] = useSearchParams();\r\n    const checkContinentsSearchParams = (): string[] => {\r\n        const continentsSP = searchParams.get(\"continents\")?.split(\",\");\r\n        if (continentsSP?.length && continentsSP[0] !== \"\") return continentsSP;\r\n        return [];\r\n    }\r\n    const [search, setSearch] = useState(\r\n        {\r\n            countryCode: searchParams.get(\"countryCode\") || \"\",\r\n            currencyCode: searchParams.get(\"currencyCode\") || \"\",\r\n            continents: checkContinentsSearchParams(),\r\n            firstFilter: true\r\n        }\r\n    );\r\n    const { data, loading, error, refetch, isRefetching } = useGetCountries({ search });\r\n    const { data: dataContinents, loading: loadingContinents, error: errorContinents } = useGetContinents();\r\n\r\n    useEffect(() => {\r\n        refetch();\r\n    }, [search, refetch]);\r\n\r\n    const tableColumns = [\r\n        {\r\n            title: TEXTS.countryList.tableColName,\r\n            key: 'name',\r\n            dataIndex: 'name'\r\n        },\r\n        {\r\n            title: TEXTS.countryList.tableColContinent,\r\n            key: 'continent',\r\n            dataIndex: ['continent', 'name']\r\n        },\r\n        {\r\n            title: TEXTS.countryList.tableColCode,\r\n            key: 'code',\r\n            dataIndex: 'code',\r\n            width: 100\r\n        },\r\n        {\r\n            title: TEXTS.countryList.tableColDetails,\r\n            key: 'details',\r\n            render: (record: { code: string }) => (\r\n                <Link to={`/${record.code}`}>{TEXTS.countryList.tableButtonViewDetails} ({record.code})</Link>\r\n            )\r\n        }\r\n    ];\r\n\r\n    const handleChangeFilter = (type: string, value: string[]|string) => {\r\n        if (!loading && !isRefetching) {\r\n            const upperCaseValue = typeof value == \"string\" ? value.toUpperCase() : value;\r\n            const newSearch = {\r\n                ...search, [type]: upperCaseValue, firstFilter: false\r\n            }\r\n            const seralizeSearchParams = {\r\n                countryCode: newSearch.countryCode,\r\n                currencyCode: newSearch.currencyCode,\r\n                continents: newSearch.continents.join(\",\")\r\n            }\r\n            setSearchParams(seralizeSearchParams);\r\n            setSearch(newSearch);\r\n        }\r\n    }\r\n\r\n    if (error || errorContinents) return <PageError500 />;\r\n\r\n    return (\r\n        <>\r\n            <Typography.Title level={3}>\r\n                {TEXTS.countryList.welcome}\r\n            </Typography.Title>\r\n            <Typography.Paragraph>\r\n                {TEXTS.countryList.description}\r\n            </Typography.Paragraph>\r\n            <Divider/>\r\n            <SearchNavForm\r\n                search={search}\r\n                dataContinents={dataContinents}\r\n                handleChangeFilter={handleChangeFilter}\r\n            />\r\n            <Skeleton loading={loading || loadingContinents || (isRefetching && !search.firstFilter)}>\r\n                <Table\r\n                    columns={tableColumns}\r\n                    dataSource={data?.countries}\r\n                    pagination={false}\r\n                    rowKey=\"code\"\r\n                />\r\n            </Skeleton>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CountryList;","import { BrowserRouter, Routes, Route } from \"react-router-dom\";\r\nimport { CountryDetail } from \"../pages-components\";\r\nimport { CountryList } from \"../pages-components\";\r\nimport Page404 from \"./Page404\";\r\n\r\nconst AppRoutes = () => {\r\n    return (\r\n        <BrowserRouter>\r\n            <Routes>\r\n                <Route path=\"/\" element={<CountryList />} />\r\n                <Route path=\"/:countryCode\" element={<CountryDetail />} />\r\n                <Route path=\"*\" element={<Page404 />} />\r\n            </Routes>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default AppRoutes;","import { Layout } from './components';\nimport './App.css';\nimport AppRoutes from './pages/AppRoutes';\n\nfunction App() {\n  return (\n    <Layout>\n      <AppRoutes/>\n    </Layout>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { FC } from 'react';\r\nimport { QueryClient, QueryClientProvider } from 'react-query';\r\n\r\nconst AppProvider:FC = ({ children }) => {\r\n    const client = new QueryClient();\r\n    return <QueryClientProvider client={client}>{children}</QueryClientProvider>\r\n}\r\n\r\nexport default AppProvider;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport AppProvider from './providers/AppProvider';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppProvider>\n      <App />\n    </AppProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}